package com.company.NetSDK;

import java.io.Serializable;

/**
 * \if ENGLISH_LANG
 * TrafficCar
 * \else
 * 交通车辆信息
 * \endif
 */
public class DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO implements Serializable {
	/**
	 *
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * \if ENGLISH_LANG
	 *  plate number
	 * \else
	 *  车牌号码
	 * \endif
	 */
	public byte					szPlateNumber[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  Plate type: "Unknown" =Unknown; "Normal"=Blue and black plate. "Yellow"=Yellow plate. "DoubleYellow"=Double-layer yellow plate
	 * \else
	 *  号牌类型 "Unknown" 未知; "Normal" 蓝牌黑牌; "Yellow" 黄牌; "DoubleYellow" 双层黄尾牌
	 * \endif
	 */
	public byte					szPlateType[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  plate color, "Blue","Yellow", "White","Black","YellowbottomBlackText","BluebottomWhiteText","BlackBottomWhiteText","ShadowGreen","YellowGreen"
	 * \else
	 *  车牌颜色    "Blue","Yellow", "White","Black","YellowbottomBlackText","BluebottomWhiteText","BlackBottomWhiteText","ShadowGreen","YellowGreen"
	 * \endif
	 */
	public byte					szPlateColor[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  vehicle color, "White", "Black", "Red", "Yellow", "Gray", "Blue","Green"
	 * \else
	 *  车身颜色    "White", "Black", "Red", "Yellow", "Gray", "Blue","Green"
	 * \endif
	 */
	public byte					szVehicleColor[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  speed, Km/H
	 * \else
	 *  速度    单位Km/H
	 * \endif
	 */
	public int					nSpeed;

	/**
	 * \if ENGLISH_LANG
	 *  trigger event type
	 * \else
	 *  触发的相关事件    参见事件列表Event List,只包含交通相关事件。
	 * \endif
	 */
	public byte					szEvent[] = new byte[64];

	/**
	 * \if ENGLISH_LANG
	 *  violation code, see TrafficGlobal.ViolationCode
	 * \else
	 *  违章代码    详见TrafficGlobal.ViolationCode
	 * \endif
	 */
	public byte					szViolationCode[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  violation describe
	 * \else
	 *  违章描述
	 * \endif
	 */
	public byte					szViolationDesc[] = new byte[64];

	/**
	 * \if ENGLISH_LANG
	 *  lower speed limit
	 * \else
	 *  速度下限
	 * \endif
	 */
	public int					nLowerSpeedLimit;

	/**
	 * \if ENGLISH_LANG
	 *  upper speed limit
	 * \else
	 *  速度上限
	 * \endif
	 */
	public int					nUpperSpeedLimit;

	/**
	 * \if ENGLISH_LANG
	 *  over speed margin, km/h
	 * \else
	 *  限高速宽限值    单位：km/h
	 * \endif
	 */
	public int					nOverSpeedMargin;

	/**
	 * \if ENGLISH_LANG
	 *  under speed margin, km/h
	 * \else
	 *  限低速宽限值    单位：km/h
	 * \endif
	 */
	public int					nUnderSpeedMargin;

	/**
	 * \if ENGLISH_LANG
	 *  lane
	 * \else
	 *  车道    参见事件列表Event List中卡口和路口事件。
	 * \endif
	 */
	public int					nLane;

	/**
	 * \if ENGLISH_LANG
	 *  vehicle size, see VideoAnalyseRule's describe
	 * \else
	 *  车辆大小,-1表示未知,否则按位
	 * \endif
	 */
	public int					nVehicleSize;

	/**
	 * \if ENGLISH_LANG
	 *  vehicle length, m
	 * \else
	 *  车辆长度    单位米
	 * \endif
	 */
	public float					fVehicleLength;

	/**
	 * \if ENGLISH_LANG
	 *  snap mode 0-normal,1-globle,2-near,4-snap on the same side,8-snap on the reverse side,16-plant picture
	 * \else
	 *  抓拍方式    0-未分类,1-全景,2-近景,4-同向抓拍,8-反向抓拍,16-号牌图像
	 * \endif
	 */
	public int					nSnapshotMode;

	/**
	 * \if ENGLISH_LANG
	 *  channel name
	 * \else
	 *  本地或远程的通道名称,可以是地点信息    来源于通道标题配置ChannelTitle.Name
	 * \endif
	 */
	public byte					szChannelName[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  Machine name
	 * \else
	 *  本地或远程设备名称    来源于普通配置General.MachineName
	 * \endif
	 */
	public byte					szMachineName[] = new byte[256];

	/**
	 * \if ENGLISH_LANG
	 *  machine group
	 * \else
	 *  机器分组或叫设备所属单位    默认为空,用户可以将不同的设备编为一组,便于管理,可重复。
	 * \endif
	 */
	public byte					szMachineGroup[] = new byte[256];

	/**
	 * \if ENGLISH_LANG
	 *  road way number
	 * \else
	 *  道路编号
	 * \endif
	 */
	public byte					szRoadwayNo[] = new byte[64];

	/**
	 * \if ENGLISH_LANG
	 *    char               szDrivingDirection[3][SDK_MAX_DRIVINGDIRECTION];
	 * \else
	 *
	 * \endif
	 */
	public byte					szDrivingDirection[][] = new byte[3][FinalVar.SDK_MAX_DRIVINGDIRECTION];

	/**
	 * \if ENGLISH_LANG
	 *  device address,OSD superimposed onto the image,from TrafficSnapshot.DeviceAddress,'\0'means end.
	 * \else
	 *  设备地址,OSD叠加到图片上的,来源于配置TrafficSnapshot.DeviceAddress,'\0'结束
	 * \endif
	 */
	public String					szDeviceAddress;

	/**
	 * \if ENGLISH_LANG
	 *  Vehicle identification, such as "Unknown" - unknown  ...
	 * \else
	 *  车辆标识, 例如 "Unknown"-未知 ...
	 * \endif
	 */
	public byte					szVehicleSign[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  Generated by the vehicle inspection device to capture the signal redundancy
	 * \else
	 *  由车检器产生抓拍信号冗余信息
	 * \endif
	 */
	public SDK_SIG_CARWAY_INFO_EX					stuSigInfo = new SDK_SIG_CARWAY_INFO_EX();

	/**
	 * \if ENGLISH_LANG
	 *  Equipment deployment locations
	 * \else
	 *  设备部署地点
	 * \endif
	 */
	public String					szMachineAddr;

	/**
	 * \if ENGLISH_LANG
	 *  Current picture exposure time, in milliseconds
	 * \else
	 *  当前图片曝光时间,单位为毫秒
	 * \endif
	 */
	public float					fActualShutter;

	/**
	 * \if ENGLISH_LANG
	 *  Current picture gain, ranging from 0 to 100
	 * \else
	 *  当前图片增益,范围为0~100
	 * \endif
	 */
	public byte					byActualGain;

	/**
	 * \if ENGLISH_LANG
	 *  Lane Direction,0 - south to north 1- Southwest to northeast 2 - West to east, 3 - Northwest to southeast 4 - north to south 5 - northeast to southwest 6 - East to West 7 - Southeast to northwest 8 - Unknown 9-customized
	 * \else
	 *  车道方向,0-南向北 1-西南向东北 2-西向东 3-西北向东南 4-北向南 5-东北向西南 6-东向西 7-东南向西北 8-未知 9-自定义
	 * \endif
	 */
	public byte					byDirection;

	/**
	 * \if ENGLISH_LANG
	 *  Address, as szDeviceAddress supplement,
	 * \else
	 *  详细地址, 作为szDeviceAddress的补充
	 * \endif
	 */
	public String					szDetailedAddress;

	/**
	 * \if ENGLISH_LANG
	 *  waterproof
	 * \else
	 *  图片防伪码
	 * \endif
	 */
	public byte					szDefendCode[] = new byte[FinalVar.SDK_COMMON_STRING_64];

	/**
	 * \if ENGLISH_LANG
	 *  Link block list data recorddefualt main keyID, 0, invalid, > 0, block list data record
	 * \else
	 *  关联禁止名单数据库记录默认主键ID, 0,无效；> 0,禁止名单数据记录
	 * \endif
	 */
	public int					nTrafficBlackListID;

	/**
	 * \if ENGLISH_LANG
	 *  bofy color RGBA
	 * \else
	 *  车身颜色RGBA
	 * \endif
	 */
	public SDK_COLOR_RGBA					stuRGBA = new SDK_COLOR_RGBA();

	/**
	 * \if ENGLISH_LANG
	 *  snap time
	 * \else
	 *  抓拍时间
	 * \endif
	 */
	public NET_TIME					stSnapTime;

	/**
	 * \if ENGLISH_LANG
	 *  Rec No
	 * \else
	 *  记录编号
	 * \endif
	 */
	public int					nRecNo;

	/**
	 * \if ENGLISH_LANG
	 *  self defined parking space number, for parking
	 * \else
	 *  自定义车位号（停车场用）
	 * \endif
	 */
	public byte					szCustomParkNo[] = new byte[FinalVar.SDK_COMMON_STRING_32 + 1];

	/**
	 * \if ENGLISH_LANG
	 *  Metal plate No.
	 * \else
	 *  车板位号
	 * \endif
	 */
	public int					nDeckNo;

	/**
	 * \if ENGLISH_LANG
	 *  Free metal plate No.
	 * \else
	 *  空闲车板数量
	 * \endif
	 */
	public int					nFreeDeckCount;

	/**
	 * \if ENGLISH_LANG
	 *  Occupized metal plate No.
	 * \else
	 *  占用车板数量
	 * \endif
	 */
	public int					nFullDeckCount;

	/**
	 * \if ENGLISH_LANG
	 *  Total metal plate No.
	 * \else
	 *  总共车板数量
	 * \endif
	 */
	public int					nTotalDeckCount;

	/**
	 * \if ENGLISH_LANG
	 *  violation name
	 * \else
	 *  违章名称
	 * \endif
	 */
	public byte					szViolationName[] = new byte[64];

	/**
	 * \if ENGLISH_LANG
	 *  Weight of car(kg)
	 * \else
	 *  车重(单位 Kg)
	 * \endif
	 */
	public int					nWeight;

	/**
	 * \if ENGLISH_LANG
	 *  custom road way, valid when byDirection is 9
	 * \else
	 *  自定义车道方向,byDirection为9时有效
	 * \endif
	 */
	public byte					szCustomRoadwayDirection[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  the physical lane number,value form 0 to 5
	 * \else
	 *  物理车道号,取值0到5
	 * \endif
	 */
	public byte					byPhysicalLane;

	/**
	 * \if ENGLISH_LANG
	 *  moving direction
	 * \else
	 *  车辆行驶方向
	 * \endif
	 */
	public int					emMovingDirection;

	/**
	 * \if ENGLISH_LANG
	 *  corresponding to throughTime
	 * \else
	 *  对应电子车牌标签信息中的过车时间(ThroughTime)
	 * \endif
	 */
	public NET_TIME					stuEleTagInfoUTC = new NET_TIME();

	/**
	 * \if ENGLISH_LANG
	 *  The BoundingBox of car window , range: [0,8191]
	 * \else
	 *  车窗包围盒，0~8191
	 * \endif
	 */
	public NET_RECT					stuCarWindowBoundingBox = new NET_RECT();

	/**
	 * \if ENGLISH_LANG
	 *  allow list information
	 * \else
	 *  允许名单信息
	 * \endif
	 */
	public NET_TRAFFICCAR_WHITE_LIST					stuWhiteList = new NET_TRAFFICCAR_WHITE_LIST();

	/**
	 * \if ENGLISH_LANG
	 *  car type
	 * \else
	 *  车辆类型
	 * \endif
	 */
	public int					emCarType;

	/**
	 * \if ENGLISH_LANG
	 *  Lane type
	 * \else
	 *  车道类型
	 * \endif
	 */
	public int					emLaneType;

	/**
	 * \if ENGLISH_LANG
	 *  Translated year of vehicle
	 * \else
	 *  车系年款翻译后文本内容
	 * \endif
	 */
	public byte					szVehicleBrandYearText[] = new byte[64];

	/**
	 * \if ENGLISH_LANG
	 *  category
	 * \else
	 *  车辆子类型
	 * \endif
	 */
	public byte					szCategory[] = new byte[32];

	/**
	 * \if ENGLISH_LANG
	 *  block list information
	 * \else
	 *  禁止名单信息
	 * \endif
	 */
	public NET_TRAFFICCAR_BLACK_LIST					stuBlackList = new NET_TRAFFICCAR_BLACK_LIST();

	/**
	 * \if ENGLISH_LANG
	 *  Traffic flow direction
	 * \else
	 *  车流量方向
	 * \endif
	 */
	public int					emFlowDirection;

	/**
	 * \if ENGLISH_LANG
	 *  Classification of toll road vehicle types
	 * \else
	 *  收费公路车辆通行费车型分类
	 * \endif
	 */
	public int					emTollsVehicleType;

	/**
	 * \if ENGLISH_LANG
	 *  Shaft type code, refer to the national standard of shaft type, and 0 represents others
	 * \else
	 *  轴型代码,参考轴型国标 0代表其他
	 * \endif
	 */
	public int					nAxleType;

	/**
	 * \if ENGLISH_LANG
	 *  Number of axles
	 * \else
	 *  车轴数量
	 * \endif
	 */
	public int					nAxleCount;

	/**
	 * \if ENGLISH_LANG
	 *  Number of wheels
	 * \else
	 *  车轮数量
	 * \endif
	 */
	public int					nWheelNum;

	/**
	 * \if ENGLISH_LANG
	 *  Body matting
	 * \else
	 *  车身抠图
	 * \endif
	 */
	public NET_TRAFFICCAR_ORIGINAL_VEHICLE					stuOriginalVehicle = new NET_TRAFFICCAR_ORIGINAL_VEHICLE();

	/**
	 * \if ENGLISH_LANG
	 *  Vehicle type by function
	 * \else
	 *  按功能划分的车辆类型
	 * \endif
	 */
	public int					emVehicleTypeByFunc;

	/**
	 * \if ENGLISH_LANG
	 *  Sun Brand
	 * \else
	 *  车辆子品牌
	 * \endif
	 */
	public int					nSunBrand;

	/**
	 * \if ENGLISH_LANG
	 *  Brand Year
	 * \else
	 *  车辆年款
	 * \endif
	 */
	public int					nBrandYear;
}
